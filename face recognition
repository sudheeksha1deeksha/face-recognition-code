import cv2
import os
import numpy as np

# Load known faces from the dataset
def load_known_faces(dataset_path):
    known_face_encodings = []
    known_face_names = []
    
    for person_name in os.listdir(dataset_path):
        person_dir = os.path.join(dataset_path, person_name)
        if os.path.isdir(person_dir):
            for img_name in os.listdir(person_dir):
                if img_name.endswith(".jpg"): # Only read jpg images
                    img_path = os.path.join(person_dir, img_name)
                    image = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
                    face_encodings = face_encodings_from_image(image)
                    if face_encodings is not None:
                        known_face_encodings.append(face_encodings)
                        known_face_names.append(person_name)
    
    return known_face_encodings, known_face_names

def face_encodings_from_image(image):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(image, scaleFactor=1.1, minNeighbors=5)
    
    if len(faces) == 0:
        return None
    
    # Assuming one face per image in the dataset
    (x, y, w, h) = faces[0]
    face = image[y:y+h, x:x+w]
    face_encoding = cv2.resize(face, (100, 100)).flatten() # Resize and flatten the face image
    return face_encoding

def recognize_face(known_face_encodings, known_face_names, face_encoding):
    matches = [np.linalg.norm(known_face - face_encoding) for known_face in known_face_encodings]
    best_match_index = np.argmin(matches)
    name = known_face_names[best_match_index]
    return name

# Path to the dataset
dataset_path = 'datasets'

# Load the known faces
known_face_encodings, known_face_names = load_known_faces(dataset_path)

# Initialize the video capture from the webcam
video_capture = cv2.VideoCapture(0)

while True:
    ret, frame = video_capture.read()
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(gray_frame, scaleFactor=1.1, minNeighbors=5)
    
    for (x, y, w, h) in faces:
        face = gray_frame[y:y+h, x:x+w]
        face_encoding = cv2.resize(face, (100, 100)).flatten() # Resize and flatten the face image
        name = recognize_face(known_face_encodings, known_face_names, face_encoding)
        
        # Draw a rectangle around the face
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 0, 255), 2)
        
        # Draw a label with a name below the face
        cv2.rectangle(frame, (x, y+h - 35), (x+w, y+h), (0, 0, 255), cv2.FILLED)
        font = cv2.FONT_HERSHEY_DUPLEX
        cv2.putText(frame, name, (x + 6, y+h - 6), font, 1.0, (255, 255, 255), 1)
    
    # Display the resulting image
    cv2.imshow('Video', frame)
    
    # Hit 'q' on the keyboard to quit!
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release handle to the webcam
video_capture.release()
cv2.destroyAllWindows()
